name: Build IDLEContainer

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest",
            os: ubuntu-latest,
            artifact: "idlecontainer.deb"
          }

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}

    - name: tests
      run: ctest

    - name: Pack
      run: cpack

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "pack/*"

  release:
    name: "Release IDLEContainer"
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
      - uses: actions/upload-artifact@v3
        with:
          path: ./upload_url
          name: upload_url

  publish:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: release
    if: contains(github.ref, 'tags/v')
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest",
            os: ubuntu-latest,
            artifact: "idlecontainer.deb",
            artifact_pattern: "*.deb"
          }

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v2
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - id: set_asset_path
      run: |
        asset_path=`ls ${{ matrix.config.artifact_pattern }}`
        echo ::set-output name=asset_path::$asset_path
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ${{ steps.set_asset_path.outputs.asset_path }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar